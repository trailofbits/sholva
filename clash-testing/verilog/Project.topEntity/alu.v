/* AUTOMATICALLY GENERATED VERILOG-2001 SOURCE CODE.
** GENERATED BY CLASH 1.6.3. DO NOT MODIFY.
*/
`timescale 100fs/100fs
module alu
    ( // Inputs
      input [17:0] cntl
    , input [6:0] status_in
    , input [31:0] opnd0_r
    , input [31:0] opnd1_r

      // Outputs
    , output wire [6:0] status_out
    , output wire [31:0] result
    );
  // src/Project.hs:74:1-9
  wire  c$eta_app_arg;
  // src/Project.hs:74:1-9
  wire  c$eta_app_arg_0;
  wire [31:0] result_1;
  // src/Project.hs:74:1-9
  wire [17:0] cntl_0;
  // src/Project.hs:74:1-9
  wire [6:0] status_in_0;
  // src/Project.hs:74:1-9
  wire [31:0] opnd0_r_0;
  // src/Project.hs:74:1-9
  wire [31:0] opnd1_r_0;
  // src/Project.hs:47:1-3
  wire  carry;
  wire [32:0] result_2;
  wire [32:0] c$case_alt_0;
  wire [32:0] c$case_alt_1;
  wire [32:0] c$case_alt_2;
  wire [32:0] c$case_alt_3;
  wire [31:0] c$app_arg;
  // src/Project.hs:47:1-3
  wire [31:0] acarry;
  wire [32:0] c$case_alt_4;
  wire [32:0] c$case_alt_5;
  wire [32:0] c$case_alt_6;
  wire [32:0] c$case_alt_7;
  wire [32:0] c$case_alt_8;
  wire [32:0] c$case_alt_9;
  wire [32:0] c$case_alt_10;
  wire [31:0] c$app_arg_0;
  wire [32:0] c$case_alt_11;
  wire [31:0] c$app_arg_1;
  wire  c$app_arg_2;
  wire  c$app_arg_3;
  wire  c$app_arg_4;
  wire  c$app_arg_5;
  wire  c$app_arg_6;
  wire  c$app_arg_7;
  wire  c$app_arg_8;
  wire  c$app_arg_9;
  wire  c$app_arg_10;
  wire  c$app_arg_11;
  wire  c$app_arg_12;
  wire  x;
  wire [88:0] ds;
  wire [31:0] result_sel_alt_t_res;
  wire [31:0] c$vec;
  wire [32:0] result_sel_alt_f_0;
  wire [38:0] c$case_alt;

  assign ds = {cntl,   status_in,   opnd0_r,
               opnd1_r};

  assign c$eta_app_arg = cntl_0[10:10];

  assign c$eta_app_arg_0 = status_in_0[2:2];

  assign c$vec = (32'b00000000000000000000000000000000);

  // map begin
  genvar i;
  generate
  for (i=0; i < 32; i = i + 1) begin : map
    wire [0:0] map_in;
    assign map_in = c$vec[i*1+:1];
    wire  map_out;
    assign map_out = map_in;


    assign result_sel_alt_t_res[i*1+:1] = map_out;
  end
  endgenerate
  // map end

  assign result_sel_alt_f_0 = ((result_2));

  assign result_1 = (((x)) == 1'b1) ? result_sel_alt_t_res : result_sel_alt_f_0[32:1];

  assign c$case_alt = {{1'b0,   1'b0,   1'b0,
                        1'b0,   1'b0,   1'b0,   1'b0},   result_1};

  assign cntl_0 = ds[88:71];

  assign status_in_0 = ds[70:64];

  assign opnd0_r_0 = ds[63:32];

  assign opnd1_r_0 = ds[31:0];

  assign carry = c$eta_app_arg & c$eta_app_arg_0;

  assign result_2 = (c$app_arg_12 == 1'b1) ? c$case_alt_0 : c$case_alt_1;

  assign c$case_alt_0 = (((opnd0_r_0))) + c$app_arg;

  assign c$case_alt_1 = (c$app_arg_11 == 1'b1) ? c$case_alt_2 : c$case_alt_3;

  assign c$case_alt_2 = (((opnd0_r_0))) - c$app_arg;

  assign c$case_alt_3 = (c$app_arg_10 == 1'b1) ? ({1'b0,((((opnd0_r_0))) & (((opnd1_r_0))))}) : c$case_alt_4;

  assign c$app_arg = (((opnd1_r_0))) + acarry;

  assign acarry = {31'b0000000000000000000000000000000,((carry))};

  assign c$case_alt_4 = (c$app_arg_9 == 1'b1) ? ({1'b0,((((opnd0_r_0))) | (((opnd1_r_0))))}) : c$case_alt_5;

  assign c$case_alt_5 = (c$app_arg_8 == 1'b1) ? ({1'b0,((((opnd0_r_0))) ^ (((opnd1_r_0))))}) : c$case_alt_6;

  assign c$case_alt_6 = (c$app_arg_7 == 1'b1) ? ({1'b0,((((opnd0_r_0))) * (((opnd1_r_0))))}) : c$case_alt_7;

  assign c$case_alt_7 = (c$app_arg_6 == 1'b1) ? ({1'b0,((((opnd0_r_0))) << 64'sd2)}) : c$case_alt_8;

  assign c$case_alt_8 = (c$app_arg_5 == 1'b1) ? ({1'b0,((((opnd0_r_0))) >> 64'sd2)}) : c$case_alt_9;

  assign c$case_alt_9 = (c$app_arg_4 == 1'b1) ? ({1'b0,c$app_arg_0}) : c$case_alt_10;

  assign c$case_alt_10 = (c$app_arg_3 == 1'b1) ? ({1'b0,c$app_arg_1}) : c$case_alt_11;

  // rotateL begin
  wire [2*32-1:0] bv;
  assign bv = {(((opnd0_r_0))),(((opnd0_r_0)))} << (64'sd2 % 32);
  assign c$app_arg_0 = bv[2*32-1 : 32];
  // rotateL end

  assign c$case_alt_11 = (c$app_arg_2 == 1'b1) ? ({1'b0,((((opnd0_r_0))) / (((opnd1_r_0))))}) : ({33 {1'bx}});

  // rotateR begin
  wire [2*32-1:0] bv_0;
  assign bv_0 = {(((opnd0_r_0))),(((opnd0_r_0)))} >> (64'sd2 % 32);
  assign c$app_arg_1 = bv_0[32-1 : 0];
  // rotateR end

  assign c$app_arg_2 = cntl_0[11:11];

  assign c$app_arg_3 = cntl_0[0:0];

  assign c$app_arg_4 = cntl_0[1:1];

  assign c$app_arg_5 = cntl_0[2:2];

  assign c$app_arg_6 = cntl_0[3:3];

  assign c$app_arg_7 = cntl_0[12:12];

  assign c$app_arg_8 = cntl_0[13:13];

  assign c$app_arg_9 = cntl_0[14:14];

  assign c$app_arg_10 = cntl_0[15:15];

  assign c$app_arg_11 = cntl_0[7:7];

  assign c$app_arg_12 = cntl_0[16:16];

  assign x = cntl_0[8:8];

  assign status_out = c$case_alt[38:32];

  assign result = c$case_alt[31:0];


endmodule

