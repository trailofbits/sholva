/* AUTOMATICALLY GENERATED VERILOG-2001 SOURCE CODE.
** GENERATED BY CLASH 1.6.3. DO NOT MODIFY.
*/
module alu
    ( // Inputs
      input [17:0] cntl
    , input [6:0] status_in
    , input [31:0] opnd0_r
    , input [31:0] opnd1_r

      // Outputs
    , output wire [6:0] status_out
    , output wire [31:0] result
    );
  wire [31:0] result_2;
  wire [0:0] bv;
  wire  c$bv_app_arg;
  wire [6:0] result_3;
  reg  c$app_arg;
  // src/Alu/Internal.hs:92:1-6
  wire [1:0] scrut4;
  wire  c$case_alt;
  reg  c$app_arg_0;
  // src/Alu/Internal.hs:92:1-6
  wire [2:0] scrut3;
  reg [0:0] c$app_arg_1;
  reg  c$app_arg_2;
  // src/Alu/Internal.hs:92:1-6
  wire [3:0] scrut2;
  // src/Alu/Internal.hs:92:1-6
  wire [32:0] result_4;
  reg  c$app_arg_3;
  // src/Alu/Internal.hs:92:1-6
  wire [4:0] scrut1;
  reg  c$case_alt_0;
  reg  c$app_arg_4;
  // src/Alu/Internal.hs:92:1-6
  wire [5:0] scrut;
  wire [0:0] c$case_scrut;
  wire  c$app_arg_5;
  wire [32:0] c$app_arg_6;
  wire  c$app_arg_7;
  wire [31:0] c$app_arg_8;
  wire  c$app_arg_9;
  wire [31:0] c$app_arg_10;
  // src/Alu/Internal.hs:92:1-6
  wire  alu_no_flags;
  // src/Alu/Internal.hs:92:1-6
  wire [11:0] scrut6;
  // src/Alu/Internal.hs:92:1-6
  wire [12:0] scrut5;
  wire [32:0] result_5;
  // src/Alu/Internal.hs:62:1-5
  wire  carry;
  wire [32:0] result_6;
  wire [32:0] c$case_alt_1;
  wire [32:0] c$case_alt_2;
  wire [32:0] c$case_alt_3;
  wire [32:0] c$case_alt_4;
  wire [31:0] c$app_arg_11;
  wire [32:0] c$case_alt_5;
  wire [32:0] c$case_alt_6;
  wire [32:0] c$case_alt_7;
  wire [32:0] c$case_alt_8;
  wire [32:0] c$case_alt_9;
  wire [32:0] c$case_alt_10;
  wire [32:0] c$case_alt_11;
  wire [31:0] c$app_arg_12;
  wire [32:0] c$case_alt_12;
  wire [31:0] c$app_arg_13;
  wire signed [63:0] wild;
  wire signed [63:0] c$wild_app_arg;
  wire [63:0] w2;
  wire  c$app_arg_14;
  wire  c$app_arg_15;
  wire  c$app_arg_16;
  wire  c$app_arg_17;
  wire  c$app_arg_18;
  wire  c$app_arg_19;
  wire  c$app_arg_20;
  wire  c$app_arg_21;
  wire  c$app_arg_22;
  wire  c$app_arg_23;
  wire  c$app_arg_24;
  wire [17:0] c$app_arg_25;
  // src/Alu.hs:14:1-3
  wire  c$eta_app_arg;
  // src/Alu.hs:14:1-3
  wire [6:0] c$eta_app_arg_0;
  // src/Alu.hs:14:1-3
  wire [6:0] status_in_0;
  // src/Alu.hs:14:1-3
  wire  c$eta_app_arg_1;
  // src/Alu.hs:14:1-3
  wire [17:0] c$eta_app_arg_2;
  // src/Alu.hs:14:1-3
  wire [17:0] cntl_0;
  // src/Alu.hs:14:1-3
  wire [31:0] opnd1_r_0;
  // src/Alu.hs:14:1-3
  wire [31:0] opnd0_r_0;
  wire [88:0] ds;
  wire [31:0] result_sel_alt_t_res;
  wire [31:0] c$vec;
  wire [32:0] c$bv;
  wire [0:0] c$case_alt_selection_res;
  wire [16:0] c$vec_0;
  wire [15:0] c$vec_1;
  wire [14:0] c$vec_2;
  wire [13:0] c$vec_3;
  wire [38:0] result_0;

  assign ds = {cntl,   status_in,   opnd0_r,
               opnd1_r};

  assign result_0 = {result_3,   result_2};

  assign c$vec = (32'b00000000000000000000000000000000);

  // map begin
  genvar i;
  generate
  for (i=0; i < 32; i = i + 1) begin : map
    wire [0:0] map_in;
    assign map_in = c$vec[i*1+:1];
    wire  map_out;
    assign map_out = map_in;


    assign result_sel_alt_t_res[i*1+:1] = map_out;
  end
  endgenerate
  // map end

  assign result_2 = (bv == 1'b1) ? result_sel_alt_t_res : (result_5[32-1 : 0]);

  assign bv = (c$bv_app_arg);

  assign c$bv_app_arg = c$eta_app_arg_2[8:8];

  assign result_3 = {status_in_0[7-1 -: 1],
                     c$app_arg_4,   c$app_arg_3,   c$app_arg_2,
                     c$app_arg_0,   c$app_arg,   1'b0};

  always @(*) begin
    case(c$case_scrut)
      1'b1 : c$app_arg = scrut4[2-1 -: 1];
      default : c$app_arg = c$case_alt;
    endcase
  end

  assign scrut4 = scrut3[2-1 : 0];

  assign c$case_alt = result_5[31:31];

  always @(*) begin
    case(c$case_scrut)
      1'b1 : c$app_arg_0 = scrut3[3-1 -: 1];
      default : c$app_arg_0 = (c$app_arg_1);
    endcase
  end

  assign scrut3 = scrut2[3-1 : 0];

  always @(*) begin
    case(result_4)
      33'b000000000000000000000000000000000 : c$app_arg_1 = 1'b1;
      default : c$app_arg_1 = 1'b0;
    endcase
  end

  assign c$bv = (result_4);

  always @(*) begin
    case(c$case_scrut)
      1'b1 : c$app_arg_2 = scrut2[4-1 -: 1];
      default : c$app_arg_2 = ~ (^ (((c$bv[7 : 0]))));
    endcase
  end

  assign scrut2 = scrut1[4-1 : 0];

  assign result_4 = ((result_5));

  always @(*) begin
    case(c$case_scrut)
      1'b1 : c$app_arg_3 = scrut1[5-1 -: 1];
      default : c$app_arg_3 = c$case_alt_0;
    endcase
  end

  assign scrut1 = scrut[5-1 : 0];

  assign c$case_alt_selection_res = ((scrut5[13-1 -: 1]));

  always @(*) begin
    case(c$case_alt_selection_res)
      1'b1 : c$case_alt_0 = 1'b0;
      default : c$case_alt_0 = result_5[33-1 -: 1];
    endcase
  end

  always @(*) begin
    case(c$case_scrut)
      1'b1 : c$app_arg_4 = scrut[6-1 -: 1];
      default : c$app_arg_4 = (c$app_arg_9 ^ c$app_arg_7) ^ c$app_arg_5;
    endcase
  end

  assign scrut = status_in_0[6-1 : 0];

  assign c$case_scrut = (alu_no_flags);

  assign c$app_arg_5 = c$app_arg_6[28:28];

  // reverse begin
  genvar i_0;
  generate
  for (i_0 = 0; i_0 < 33; i_0 = i_0 + 1) begin : reverse
    assign c$app_arg_6[(33 - 1 - i_0)*1+:1] = result_5[i_0*1+:1];
  end
  endgenerate
  // reverse end

  assign c$app_arg_7 = c$app_arg_8[27:27];

  // reverse begin
  genvar i_1;
  generate
  for (i_1 = 0; i_1 < 32; i_1 = i_1 + 1) begin : reverse_0
    assign c$app_arg_8[(32 - 1 - i_1)*1+:1] = opnd1_r_0[i_1*1+:1];
  end
  endgenerate
  // reverse end

  assign c$app_arg_9 = c$app_arg_10[27:27];

  // reverse begin
  genvar i_2;
  generate
  for (i_2 = 0; i_2 < 32; i_2 = i_2 + 1) begin : reverse_1
    assign c$app_arg_10[(32 - 1 - i_2)*1+:1] = opnd0_r_0[i_2*1+:1];
  end
  endgenerate
  // reverse end

  assign alu_no_flags = scrut6[12-1 -: 1];

  assign scrut6 = scrut5[12-1 : 0];

  assign c$vec_0 = (cntl_0[17-1 : 0]);

  assign c$vec_1 = (c$vec_0[16-1 : 0]);

  assign c$vec_2 = (c$vec_1[15-1 : 0]);

  assign c$vec_3 = (c$vec_2[14-1 : 0]);

  assign scrut5 = c$vec_3[13-1 : 0];

  assign result_5 = (result_6);

  assign carry = c$eta_app_arg_1 & c$eta_app_arg;

  assign result_6 = (1'b1 == c$app_arg_24) ? c$case_alt_1 : c$case_alt_2;

  assign c$case_alt_1 = (((opnd0_r_0))) + c$app_arg_11;

  assign c$case_alt_2 = (1'b1 == c$app_arg_23) ? c$case_alt_3 : c$case_alt_4;

  assign c$case_alt_3 = (((opnd0_r_0))) - c$app_arg_11;

  assign c$case_alt_4 = (1'b1 == c$app_arg_22) ? ({1'b0,((((opnd0_r_0))) & (((opnd1_r_0))))}) : c$case_alt_5;

  assign c$app_arg_11 = (((opnd1_r_0))) + ({31'b0000000000000000000000000000000,((carry))});

  assign c$case_alt_5 = (1'b1 == c$app_arg_21) ? ({1'b0,((((opnd0_r_0))) | (((opnd1_r_0))))}) : c$case_alt_6;

  assign c$case_alt_6 = (1'b1 == c$app_arg_20) ? ({1'b0,((((opnd0_r_0))) ^ (((opnd1_r_0))))}) : c$case_alt_7;

  assign c$case_alt_7 = (1'b1 == c$app_arg_19) ? ({1'b0,((((opnd0_r_0))) * (((opnd1_r_0))))}) : c$case_alt_8;

  assign c$case_alt_8 = (1'b1 == c$app_arg_18) ? ({1'b0,((((opnd0_r_0))) << wild)}) : c$case_alt_9;

  assign c$case_alt_9 = (1'b1 == c$app_arg_17) ? ({1'b0,((((opnd0_r_0))) >> wild)}) : c$case_alt_10;

  assign c$case_alt_10 = (1'b1 == c$app_arg_16) ? ({1'b0,c$app_arg_12}) : c$case_alt_11;

  assign c$case_alt_11 = (1'b1 == c$app_arg_15) ? ({1'b0,c$app_arg_13}) : c$case_alt_12;

  // rotateL begin
  wire [2*32-1:0] bv_0;
  assign bv_0 = {(((opnd0_r_0))),(((opnd0_r_0)))} << (wild % 32);
  assign c$app_arg_12 = bv_0[2*32-1 : 32];
  // rotateL end

  assign c$case_alt_12 = (1'b1 == c$app_arg_14) ? ({1'b0,((((opnd0_r_0))) / (((opnd1_r_0))))}) : ({33 {1'bx}});

  // rotateR begin
  wire [2*32-1:0] bv_1;
  assign bv_1 = {(((opnd0_r_0))),(((opnd0_r_0)))} >> (wild % 32);
  assign c$app_arg_13 = bv_1[32-1 : 0];
  // rotateR end

  assign wild = $signed(c$wild_app_arg);

  assign c$wild_app_arg = $unsigned(w2[0+:64]);

  assign w2 = {32'b00000000000000000000000000000000,(((opnd1_r_0)))};

  assign c$app_arg_14 = c$app_arg_25[11:11];

  assign c$app_arg_15 = c$app_arg_25[0:0];

  assign c$app_arg_16 = c$app_arg_25[1:1];

  assign c$app_arg_17 = c$app_arg_25[2:2];

  assign c$app_arg_18 = c$app_arg_25[3:3];

  assign c$app_arg_19 = c$app_arg_25[12:12];

  assign c$app_arg_20 = c$app_arg_25[13:13];

  assign c$app_arg_21 = c$app_arg_25[14:14];

  assign c$app_arg_22 = c$app_arg_25[15:15];

  assign c$app_arg_23 = c$app_arg_25[7:7];

  assign c$app_arg_24 = c$app_arg_25[16:16];

  // reverse begin
  genvar i_3;
  generate
  for (i_3 = 0; i_3 < 18; i_3 = i_3 + 1) begin : reverse_2
    assign c$app_arg_25[(18 - 1 - i_3)*1+:1] = cntl_0[i_3*1+:1];
  end
  endgenerate
  // reverse end

  assign c$eta_app_arg = c$eta_app_arg_0[2:2];

  // reverse begin
  genvar i_4;
  generate
  for (i_4 = 0; i_4 < 7; i_4 = i_4 + 1) begin : reverse_3
    assign c$eta_app_arg_0[(7 - 1 - i_4)*1+:1] = status_in_0[i_4*1+:1];
  end
  endgenerate
  // reverse end

  assign status_in_0 = ds[70:64];

  assign c$eta_app_arg_1 = c$eta_app_arg_2[10:10];

  // reverse begin
  genvar i_5;
  generate
  for (i_5 = 0; i_5 < 18; i_5 = i_5 + 1) begin : reverse_4
    assign c$eta_app_arg_2[(18 - 1 - i_5)*1+:1] = cntl_0[i_5*1+:1];
  end
  endgenerate
  // reverse end

  assign cntl_0 = ds[88:71];

  assign opnd1_r_0 = ds[31:0];

  assign opnd0_r_0 = ds[63:32];

  assign status_out = result_0[38:32];

  assign result = result_0[31:0];


endmodule

